"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Config ration  ile for vim
set modelines=0		" CVE-2007-2438

" Normally we use vim-extensions. jf you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup

let skip_defaults_vim=1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vim-plug
"  -> YCM
"  -> gruvbox
"  -> vim-cpp-enhanced-highlight
"  -> asyncrun.vim
"  -> vim-airline
"  -> vim-airline-themes
"  -> nerdtree
"  -> nerdcommenter
"  -> auto-pairs
"  -> vim-surround
"  -> LeaderF
"  -> wildfire.vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

" Auto Complete
Plug 'Valloric/YouCompleteMe', { 'for': ['c', 'cpp', 'python'] }

" Color Theme
Plug 'morhetz/gruvbox'
let g:gruvbox_contrast_dark="soft"

" Cpp syntax highlight
Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['cpp'] }

" AsyncRun
Plug 'skywind3000/asyncrun.vim', { 'for': ['c', 'cpp'] }

" Vim-airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" NERDTree
Plug 'preservim/nerdtree',{ 'on': 'NERDTreeToggle' }
Plug 'scrooloose/nerdcommenter'
Plug 'jiangmiao/auto-pairs'

" easy motion
"Plug 'easymotion/vim-easymotion'

" vim-surround
"Plug 'tpope/vim-surround', { 'for': ['c', 'cpp'] }

" LeaderF
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

" Indentline
Plug 'yggdroot/indentline'

" Wildfire
"Plug 'gcmt/wildfire.vim', { 'for': ['c', 'cpp'] }

call plug#end()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=100

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * silent! checktime

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
noremap \ ,

" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Avoid garbled characters in Chinese language windows OS
let $LANG='en'
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

" Turn on the Wild menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

" Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Properly disable sound on errors on MacVim
if has("gui_macvim")
    autocmd GUIEnter * set vb t_vb=
endif

" Add a bit extra margin to the left
set foldcolumn=1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

" Set regular expression engine automatically
set regexpengine=0

" Set colorscheme
colorscheme gruvbox
set background=dark

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines


""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Disable highlight when <leader><space> is pressed
map <silent> <leader><space> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext<cr>

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <C-r>=escape(expand("%:p:h"), " ")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
map H ^
map L $

" delete something without colbbering unnamed register
"nnoremap s "_d
nnoremap ss "_dd
"nnoremap S "_D

" Fast saving
nnoremap <Leader>w :w!<CR>
nnoremap <Leader>q :q<CR>

nnoremap ;; :
inoremap jk <esc>
vnoremap jk <esc>

" fast move cursor
nnoremap J 7j
nnoremap K 7k

nnoremap <Leader>n :source $MYVIMRC<CR>
nnoremap <Leader>ln :set number!<CR>
nnoremap <Leader>lr :set relativenumber!<CR>

" prevent triggering the suspend command
noremap <C-z> <NOP>

" split windwos
noremap <Leader>sl :set splitright<CR>  :vsplit<CR>
noremap <Leader>sr :set nosplitright<CR>:vsplit<CR>
noremap <Leader>sj :set nosplitbelow<CR>:split<CR>
noremap <Leader>sk :set splitbelow<CR>  :split<CR>

" resize windows
noremap <Leader><up>    :res +5<CR>
noremap <Leader><down>  :res -5<CR>
noremap <Leader><left>  :vertical resize-5<CR>
noremap <Leader><right> :vertical resize+5<CR>

" move cursor
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap ∆ mz:m+<cr>`z
  nmap ˚ mz:m-2<cr>`z
  vmap ∆ :m'>+<cr>`<my`>mzgv`yo`z
  vmap ˚ :m'<-2<cr>`>my`<mzgv`yo`z
  "nmap <D-j> <M-j>
  "nmap <D-k> <M-k>
  "vmap <D-j> <M-j>
  "vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scribble
"map <leader>q :e ~/buffer<cr>

" Quickly open a markdown buffer for scribble
"map <leader>x :e ~/buffer.md<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction

function! CmdLine(str)
    call feedkeys(":" . a:str)
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => My settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin on
filetype plugin indent on

" only show relativenumber
set nonumber
set relativenumber

set showcmd
set nocompatible

set cursorline

set autoindent
" set smartindent

set softtabstop=4

" search
"set nowrapscan

"the range 0-9 are always considered as decimal. 
set nrformats=

" Disable automatic comment insertion in .c .cpp
au FileType c,cpp setlocal comments-=:// comments+=f://

set list listchars=tab:→\ ,trail:·


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ---
" --- YCM Settings
" ---
nnoremap gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap gr :YcmCompleter GoToReferences<CR>
nnoremap gt :YcmCompleter GetType<CR>

"autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" let g:ycm_autocmd_event = ['InsertEnter', 'InsertLeave']
" let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_min_num_of_chars_for_completion=2

let g:ycm_complete_in_strings=1
" let g:ycm_complete_in_comments=1

set completeopt=menu,menuone
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0

let g:ycm_key_invoke_completion = '<C-z>'
" let g:ycm_semantic_triggers = {
        " \'c':['re!\w{2}'],
        " \}
"let g:ycm_filetype_whitelist = {
            "\ "c":1,
            "\ "cpp":1,
            "\ "py":1,
            "\ }

" ---
" --- AsyncRun Settings
" ---
let g:asyncrun_open = 10
" nnoremap <F10> :call asyncrun#quickfix_toggle(6)<CR>
" let g:asyncrun_bell = 1
" c++ compile
nnoremap <Leader>o :AsyncRun g++ -std=c++11
            \ "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"<CR>
" c++ run
nnoremap <Leader>r :AsyncRun "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"<CR>

" ---
" --- NERDTree
" ---
nnoremap <Leader>t :NERDTreeToggle<CR>
nnoremap <Leader>f :NERDTreeFind<CR>
let NERDTreeShowHidden=1
"let NERDTreeIgnore=[
    "\ '\.git$', '\.svn$', '\.DS_Store$'
    "\ ]
" Exit Vim if NERDTree is the only
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" ---
" --- nerdcommenter
" ---
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" ---
" --- vim-airline
" ---
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#formatter='jsformatter'
let g:airline_theme='angr'

" ---
" --- indentLine
" ---
nnoremap <Leader>il :IndentLinesToggle<CR>
